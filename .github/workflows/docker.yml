name: Build and Publish Docker Image

on:
  schedule:
    # Build and push Docker images every 3 hours
    - cron:  '0 */3 * * *'
jobs:
  docker:
    if: github.repository_owner == 'pauleveritt' && github.repository == 'tagstr-site' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      actions: write
      checks: write
      contents: write
    strategy:
      fail-fast: false
      matrix:
        base_image: [ "alpine3.20", "alpine3.19", "bookworm" ,"bullseye" ,"slim-bookworm"  ,"slim-bullseye" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get the latest commit hash
        id: get_commit_hash
        run: | 
          COMMIT_HASH=$(git ls-remote https://github.com/lysnikolaou/cpython.git refs/heads/tag-strings-rebased | awk '{print $1}')
          SHORT_COMMIT_HASH=$(echo $COMMIT_HASH | cut -c 1-7)
          echo "::set-output name=commit_hash::$COMMIT_HASH"
          echo "::set-output name=short_commit_hash::$SHORT_COMMIT_HASH"
      - name: Check if Docker Image Exists
        id: check-image
        run: |
          IMAGE="koxudaxi/python"
          TAG="3.14.0a0-tag-strings-rebased-${{ steps.get_commit_hash.outputs.commit_hash }}-${{ matrix.base_image }}"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/${IMAGE}/tags/${TAG}")
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Image exists on Docker Hub."
            echo "::set-output name=exists::true"
          else
            echo "Image does not exist on Docker Hub."
            echo "::set-output name=exists::false"
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            koxudaxi/python
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=3.14.0a0-${{ matrix.base_image }}
            type=raw,value=3.14.0a0-tag-strings-rebased-${{ matrix.base_image }}
            type=raw,value=3.14.0a0-tag-strings-rebased-${{ steps.get_commit_hash.outputs.short_commit_hash }}-${{ matrix.base_image }}
            type=raw,value=3.14.0a0-tag-strings-rebased-${{ steps.get_commit_hash.outputs.commit_hash }}-${{ matrix.base_image }}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Inject commit hash in Dockerfile
        run: ./docker/scripts/commit_level_build_patch.sh ${{ steps.get_commit_hash.outputs.commit_hash }} ./docker/docker/${{ matrix.base_image }}/Dockerfile
      - name: Build and push
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./docker/docker/${{ matrix.base_image }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
      - name: Update README.md with the latest commit hash ${{ steps.get_commit_hash.outputs.commit_hash }}
        if: github.ref == 'refs/heads/main' && matrix.base_image == 'alpine3.20' && steps.check-image.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT_HASH: ${{ steps.get_commit_hash.outputs.commit_hash }}
          GIT_COMMIT_SHORT_HASH: ${{ steps.get_commit_hash.outputs.short_commit_hash }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          envsubst  < docker/README.md.template > docker/README.md
          git add docker/README.md
          COMMIT_MESSAGE="Update README.md with the latest commit hash ${GIT_COMMIT_HASH}"
          git commit -m "$COMMIT_MESSAGE"
          git push origin main
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        if: github.ref == 'refs/heads/main' && matrix.base_image == 'alpine3.20' && steps.check-image.outputs.exists == 'false'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: koxudaxi/python
          readme-filepath: ./docker/README.md
